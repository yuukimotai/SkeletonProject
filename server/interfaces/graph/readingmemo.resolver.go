package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.39

import (
	"context"
	"fmt"
	"obserbooks/domain/model"
	database "obserbooks/infrastructure/mysql"
	repositories "obserbooks/infrastructure/repositories/memo"
	"obserbooks/usecases/interactors"
)

// CreateReadingMemo is the resolver for the createReadingMemo field.
func (r *mutationResolver) CreateReadingMemo(ctx context.Context, input model.NewReadingMemo) (*model.ReadingMemo, error) {
	rmi := NewReadingMemoResolver(r.DB)
	result, err := rmi.ReadingMemoInteractor.
		ReadingMemoRepository.
		CreateReadingMemo(ctx, input)

	if err != nil {
		fmt.Println("ReadingMemoRepositoryを使用してデータ作成できませんでした")
	}

	return result, err
}

// UpdateReadingMemo is the resolver for the updateReadingMemo field.
func (r *mutationResolver) UpdateReadingMemo(ctx context.Context, input model.UpdateReadingMemo) (*model.ReadingMemo, error) {
	rmi := NewReadingMemoResolver(r.DB)
	result, err := rmi.ReadingMemoInteractor.
		ReadingMemoRepository.
		UpdateReadingMemo(ctx, input)

	if err != nil {
		fmt.Println("ReadingMemoRepositoryを使用してデータ更新できませんでした")
	}

	return result, err
}

// DeleteReadingMemo is the resolver for the deleteReadingMemo field.
func (r *mutationResolver) DeleteReadingMemo(ctx context.Context, input model.DeleteReadingMemo) (int, error) {
	rmi := NewReadingMemoResolver(r.DB)
	result, err := rmi.ReadingMemoInteractor.
		ReadingMemoRepository.
		DeleteReadingMemo(ctx, input)

	if err != nil {
		fmt.Println("ReadingMemoRepositoryを使用してデータ更新できませんでした")
	}

	return result, err
}

// ReadingMemo is the resolver for the ReadingMemo field.
func (r *queryResolver) ReadingMemo(ctx context.Context, input model.GetMemo) (*model.ReadingMemo, error) {
	rmi := NewReadingMemoResolver(r.DB)
	result, err := rmi.ReadingMemoInteractor.
		ReadingMemoRepository.
		GetReadingMemo(ctx, input)

	if err != nil {
		fmt.Println("ReadingMemoRepositoryを使用してデータ更新できませんでした")
	}

	return result, err
}

// ReadingMemos is the resolver for the ReadingMemos field.
func (r *queryResolver) ReadingMemos(ctx context.Context, input model.GetAllMemo) ([]*model.ReadingMemo, error) {
	rmi := NewReadingMemoResolver(r.DB)
	result, err := rmi.ReadingMemoInteractor.
		ReadingMemoRepository.
		GetAllReadingMemo(ctx, input)

	if err != nil {
		fmt.Println("ReadingMemoRepositoryを使用してデータ更新できませんでした")
	}

	return result, err
}

type ReadingMemoResolver struct {
	ReadingMemoInteractor *interactors.ReadingMemoInteractor
}

func NewReadingMemoResolver(db *database.DB) *ReadingMemoResolver {
	memoRepository := repositories.NewReadingMemoRepository(db)
	memoInteractor := interactors.NewReadingMemoInteractor(memoRepository)

	return &ReadingMemoResolver{
		ReadingMemoInteractor: memoInteractor,
	}
}
