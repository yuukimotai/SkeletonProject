package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.39

import (
	"context"
	"fmt"
	"obserbooks/domain/graph"
	"obserbooks/domain/model"
	database "obserbooks/infrastructure/mysql"
	repositories "obserbooks/infrastructure/repositories/book"
	"obserbooks/usecases/interactors"
)

// CreateMyBookData is the resolver for the createMyBookData field.
func (r *mutationResolver) CreateMyBookData(ctx context.Context, input model.NewBook) (*model.Book, error) {
	bi := NewBookResolver(r.DB)
	result, err := bi.BookInteractor.BookRepository.CreateBook(ctx, input)

	book := &model.Book{
		Title:         result.Title,
		Author:        result.Author,
		JanCode:       result.JanCode,
		PublisherName: result.PublisherName,
	}

	return book, err
}

// DeleteMyBookData is the resolver for the deleteMyBookData field.
func (r *mutationResolver) DeleteMyBookData(ctx context.Context, input model.DeleteBook) (*model.Book, error) {
	validateResult, validateErr := ValidateJwt(ctx)
	if validateErr != nil {
		fmt.Println(validateResult, validateErr)
		return nil, validateErr
	}
	bi := NewBookResolver(r.DB)
	result, err := bi.BookInteractor.BookRepository.DeleteBook(ctx, input)
	if err != nil {
		println(err)
	}

	book := &model.Book{
		Title:         result.Title,
		Author:        result.Author,
		JanCode:       result.JanCode,
		PublisherName: result.PublisherName,
	}

	return book, nil
}

// CreateAttentionBookData is the resolver for the createAttentionBookData field.
func (r *mutationResolver) CreateAttentionBookData(ctx context.Context, input model.NewBook) (*model.Book, error) {
	bi := NewBookResolver(r.DB)
	result, err := bi.BookInteractor.BookRepository.CreateAttentionBook(ctx, input)

	book := &model.Book{
		Title:         result.Title,
		Author:        result.Author,
		JanCode:       result.JanCode,
		PublisherName: result.PublisherName,
	}

	return book, err
}

// FindAllMyBook is the resolver for the findAllMyBook field.
func (r *queryResolver) FindAllMyBook(ctx context.Context) ([]*model.Book, error) {
	bi := NewBookResolver(r.DB)
	result, err := bi.BookInteractor.BookRepository.FindMyBooks(ctx)
	if err != nil {
		fmt.Println("bookRepositoryからレコードが取得できませんでした")
	}
	fmt.Println(result)
	books := []*model.Book{}
	for i := 0; i < len(result); i++ {
		book := &model.Book{
			Title:          result[i].Title,
			Author:         result[i].Author,
			JanCode:        result[i].JanCode,
			PublisherName:  result[i].PublisherName,
			ItemUrl:        result[i].ItemUrl,
			LargeImageUrl:  result[i].LargeImageUrl,
			MediumImageUrl: result[i].MediumImageUrl,
			MyBook:         result[i].MyBook,
			AttentionBook:  result[i].AttentionBook,
		}
		books = append(books, book)
	}

	return books, err
}

// FindBook is the resolver for the findBook field.
func (r *queryResolver) FindBook(ctx context.Context, input model.FindBook) (*model.Book, error) {
	validateResult, validateErr := ValidateJwt(ctx)
	if validateErr != nil {
		fmt.Println(validateResult, validateErr)
		return nil, validateErr
	}
	bi := NewBookResolver(r.DB)
	result, err := bi.BookInteractor.BookRepository.FindBook(ctx, input)
	if err != nil {
		println(err)
	}

	book := &model.Book{
		Title:         result.Title,
		Author:        result.Author,
		JanCode:       result.JanCode,
		PublisherName: result.PublisherName,
	}

	return book, nil
}

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

// Query returns graph.QueryResolver implementation.
func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
type BookResolver struct {
	BookInteractor *interactors.BookInteractor
}

func NewBookResolver(db *database.DB) *BookResolver {
	bookRepository := repositories.NewBookRepository(db)
	bookInteractor := interactors.NewBookInteractor(bookRepository)

	return &BookResolver{
		BookInteractor: bookInteractor,
	}
}
